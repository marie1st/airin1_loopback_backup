import { Getter } from '@loopback/core';
import { DefaultCrudRepository, HasManyRepositoryFactory, HasOneRepositoryFactory } from '@loopback/repository';
import { AirinoneDataSource } from '../datasources';
import { OrderProduct, OrderProductRelations, WithdrawUsedEquipment, WithdrawMechanicalEquipment, WithdrawMoney, EmployeeWorking, SetupProcessPic, SetupCost, SetupFrabicProtect, SetupFcu, SetupPipe, SetupCdu, PipeSysNElec, LeakTest, VacummTest, AddLiquid } from '../models';
import { WithdrawUsedEquipmentRepository } from './withdraw-used-equipment.repository';
import { WithdrawMechanicalEquipmentRepository } from './withdraw-mechanical-equipment.repository';
import { WithdrawMoneyRepository } from './withdraw-money.repository';
import { EmployeeWorkingRepository } from './employee-working.repository';
import { SetupProcessPicRepository } from './setup-process-pic.repository';
import { SetupCostRepository } from './setup-cost.repository';
import { SetupFrabicProtectRepository } from './setup-frabic-protect.repository';
import { SetupFcuRepository } from './setup-fcu.repository';
import { SetupPipeRepository } from './setup-pipe.repository';
import { SetupCduRepository } from './setup-cdu.repository';
import { PipeSysNElecRepository } from './pipe-sys-n-elec.repository';
import { LeakTestRepository } from './leak-test.repository';
import { VacummTestRepository } from './vacumm-test.repository';
import { AddLiquidRepository } from './add-liquid.repository';
export declare class OrderProductRepository extends DefaultCrudRepository<OrderProduct, typeof OrderProduct.prototype.order_id, OrderProductRelations> {
    protected withdrawUsedEquipmentRepositoryGetter: Getter<WithdrawUsedEquipmentRepository>;
    protected withdrawMechanicalEquipmentRepositoryGetter: Getter<WithdrawMechanicalEquipmentRepository>;
    protected withdrawMoneyRepositoryGetter: Getter<WithdrawMoneyRepository>;
    protected employeeWorkingRepositoryGetter: Getter<EmployeeWorkingRepository>;
    protected setupProcessPicRepositoryGetter: Getter<SetupProcessPicRepository>;
    protected setupCostRepositoryGetter: Getter<SetupCostRepository>;
    protected setupFrabicProtectRepositoryGetter: Getter<SetupFrabicProtectRepository>;
    protected setupFcuRepositoryGetter: Getter<SetupFcuRepository>;
    protected setupPipeRepositoryGetter: Getter<SetupPipeRepository>;
    protected setupCduRepositoryGetter: Getter<SetupCduRepository>;
    protected pipeSysNElecRepositoryGetter: Getter<PipeSysNElecRepository>;
    protected leakTestRepositoryGetter: Getter<LeakTestRepository>;
    protected vacummTestRepositoryGetter: Getter<VacummTestRepository>;
    protected addLiquidRepositoryGetter: Getter<AddLiquidRepository>;
    readonly withdrawUsedEquipments: HasManyRepositoryFactory<WithdrawUsedEquipment, typeof OrderProduct.prototype.order_id>;
    readonly withdrawMechanicalEquipments: HasManyRepositoryFactory<WithdrawMechanicalEquipment, typeof OrderProduct.prototype.order_id>;
    readonly withdrawMoney: HasOneRepositoryFactory<WithdrawMoney, typeof OrderProduct.prototype.order_id>;
    readonly employeeWorking: HasOneRepositoryFactory<EmployeeWorking, typeof OrderProduct.prototype.order_id>;
    readonly setupProcessPic: HasOneRepositoryFactory<SetupProcessPic, typeof OrderProduct.prototype.order_id>;
    readonly setupCost: HasOneRepositoryFactory<SetupCost, typeof OrderProduct.prototype.order_id>;
    readonly setupFrabicProtect: HasOneRepositoryFactory<SetupFrabicProtect, typeof OrderProduct.prototype.order_id>;
    readonly setupFcu: HasOneRepositoryFactory<SetupFcu, typeof OrderProduct.prototype.order_id>;
    readonly setupPipe: HasOneRepositoryFactory<SetupPipe, typeof OrderProduct.prototype.order_id>;
    readonly setupCdu: HasOneRepositoryFactory<SetupCdu, typeof OrderProduct.prototype.order_id>;
    readonly pipeSysNElec: HasOneRepositoryFactory<PipeSysNElec, typeof OrderProduct.prototype.order_id>;
    readonly leakTest: HasOneRepositoryFactory<LeakTest, typeof OrderProduct.prototype.order_id>;
    readonly vacummTest: HasOneRepositoryFactory<VacummTest, typeof OrderProduct.prototype.order_id>;
    readonly addLiquid: HasOneRepositoryFactory<AddLiquid, typeof OrderProduct.prototype.order_id>;
    constructor(dataSource: AirinoneDataSource, withdrawUsedEquipmentRepositoryGetter: Getter<WithdrawUsedEquipmentRepository>, withdrawMechanicalEquipmentRepositoryGetter: Getter<WithdrawMechanicalEquipmentRepository>, withdrawMoneyRepositoryGetter: Getter<WithdrawMoneyRepository>, employeeWorkingRepositoryGetter: Getter<EmployeeWorkingRepository>, setupProcessPicRepositoryGetter: Getter<SetupProcessPicRepository>, setupCostRepositoryGetter: Getter<SetupCostRepository>, setupFrabicProtectRepositoryGetter: Getter<SetupFrabicProtectRepository>, setupFcuRepositoryGetter: Getter<SetupFcuRepository>, setupPipeRepositoryGetter: Getter<SetupPipeRepository>, setupCduRepositoryGetter: Getter<SetupCduRepository>, pipeSysNElecRepositoryGetter: Getter<PipeSysNElecRepository>, leakTestRepositoryGetter: Getter<LeakTestRepository>, vacummTestRepositoryGetter: Getter<VacummTestRepository>, addLiquidRepositoryGetter: Getter<AddLiquidRepository>);
}
